// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// Blog post model
model Post {
  id            String     @id @default(cuid())
  slug          String     @unique
  title         String     @db.VarChar(500)
  excerpt       String     @db.Text
  content       String     @db.Text
  featuredImage String     @db.VarChar(500)
  published     Boolean    @default(false)
  date          DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  readTime      Int?
  views         Int        @default(0)
  authorId      String
  author        Author     @relation(fields: [authorId], references: [id])
  categoryId    String
  category      Category   @relation(fields: [categoryId], references: [id])
  tags          PostTags[]
  postViews     PostView[]
}

// Blog post author
model Author {
  id     String  @id @default(cuid())
  name   String  @db.VarChar(255)
  email  String  @unique @db.VarChar(255)
  avatar String? @db.VarChar(500)
  bio    String? @db.Text
  posts  Post[]
}

// Blog post category
model Category {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

// Blog post tag
model Tag {
  id    String     @id @default(cuid())
  name  String     @unique
  slug  String     @unique
  posts PostTags[]
}

// Many-to-many relationship between posts and tags
model PostTags {
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

// Post view tracking for analytics
model PostView {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.Text
  viewedAt  DateTime @default(now())

  @@index([postId])
  @@index([viewedAt])
}

// Site settings model
model Setting {
  id    String @id @default(cuid())
  key   String @unique @db.VarChar(255)
  value String @db.Text
  type  String @default("string") @db.VarChar(50) // string, number, boolean, json
  
  @@index([key])
}

// Portfolio model
model Portfolio {
  id            String              @id @default(cuid())
  slug          String              @unique
  title         String              @db.VarChar(500)
  description   String              @db.Text
  content       String              @db.Text
  featuredImage String              @db.VarChar(500)
  images        String?             @db.Text // JSON array of image URLs
  clientName    String?             @db.VarChar(255)
  projectUrl    String?             @db.VarChar(500)
  githubUrl     String?             @db.VarChar(500)
  featured      Boolean             @default(false)
  published     Boolean             @default(false)
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  views         Int                 @default(0)
  categoryId    String
  category      PortfolioCategory   @relation(fields: [categoryId], references: [id])
  tags          PortfolioTags[]
  portfolioViews PortfolioView[]

  @@index([slug])
  @@index([featured])
  @@index([published])
}

// Portfolio category
model PortfolioCategory {
  id        String      @id @default(cuid())
  name      String      @unique
  slug      String      @unique
  color     String?     @db.VarChar(7) // hex color code
  icon      String?     @db.VarChar(50) // emoji or icon name
  portfolios Portfolio[]
}

// Portfolio tag/technology
model PortfolioTag {
  id         String          @id @default(cuid())
  name       String          @unique
  slug       String          @unique
  color      String?         @db.VarChar(7) // hex color code
  portfolios PortfolioTags[]
}

// Many-to-many relationship between portfolios and tags
model PortfolioTags {
  portfolioId String
  portfolio   Portfolio    @relation(fields: [portfolioId], references: [id])
  tagId       String
  tag         PortfolioTag @relation(fields: [tagId], references: [id])

  @@id([portfolioId, tagId])
}

// Portfolio view tracking for analytics
model PortfolioView {
  id          String    @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  ipAddress   String?   @db.VarChar(45)
  userAgent   String?   @db.Text
  viewedAt    DateTime  @default(now())

  @@index([portfolioId])
  @@index([viewedAt])
}
